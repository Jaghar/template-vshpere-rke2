apiVersion: rke-machine-config.cattle.io/v1
kind: VmwarevsphereConfig
metadata:
  name: {{ .Values.cluster.name }}-{{ .Values.pool.controlplane.name }}
  namespace: fleet-default
boot2dockerUrl: ""
cfgparam:
- disk.enableUUID=TRUE
cloneFrom:  {{ .Values.vcenter.template }}
cloudConfig: |
  #cloud-config
  runcmd: 
    - "bash /root/cloudinit.sh"
    
  write_files: 
    - 
      content: |
          #!/bin/bash
          
          
          
          /usr/bin/vmtoolsd --cmd 'info-get guestinfo.ovfEnv' > /tmp/ovfenv
          IPAddress=$(sed -n 's/.*Property oe:key="guestinfo.interface.0.ip.0.address" oe:value="\([^"]*\).*/\1/p' /tmp/ovfenv)
          
          SubnetMask=$(sed -n 's/.*Property oe:key="guestinfo.interface.0.ip.0.netmask" oe:value="\([^"]*\).*/\1/p' /tmp/ovfenv)
          
          CIDR=$(ipcalc $IPAddress/$SubnetMask|grep "^Netmask"|awk '{print $4}') 
          Gateway=$(sed -n 's/.*Property oe:key="guestinfo.interface.0.route.0.gateway" oe:value="\([^"]*\).*/\1/p' /tmp/ovfenv)
          
          DNSSearch=$(sed -n 's/.*Property oe:key="guestinfo.dnssearch.servers" oe:value="\([^"]*\).*/\1/p' /tmp/ovfenv)
          
          DNS=$(sed -n 's/.*Property oe:key="guestinfo.dns.servers" oe:value="\([^"]*\).*/\1/p' /tmp/ovfenv)
          
          nmcli con add con-name static ifname eth0 type ethernet ip4 $IPAddress/$CIDR gw4 $Gateway ipv4.dns "$DNS" ipv4.dns-search "$DNSSearch"
          
          nmcli con mod static ipv6.method disabled
          nmcli con up static
          
          hostnamectl set-hostname $(hostname).vi.pp.in.phm.education.gouv.fr
          
          /usr/sbin/subscription-manager unregister
          
          /usr/sbin/subscription-manager clean
          
          /usr/bin/rm /etc/yum.repo.d/* -f
          
          /usr/bin/yum remove katello* -y
          
    
          /usr/bin/curl -sS  'https://pr-sti-sat01.tec.pp.in.phm.education.gouv.fr/register?activation_keys=ak-qa-rhel-8x&force=true&hostgroup_id=844&location_id=4&organization_id=1&setup_insights=false' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0LCJpYXQiOjE3MDA4MzczMzAsImp0aSI6ImU1YWNlODBiNjU0MDIyMzMyODFhOGQ4YzZlYjc2MWY2OWUyNGMyZDc2OGJjZjVmNmJmYzlhMWVmNzFiMzhmZDciLCJleHAiOjIwMTYxOTczMzAsInNjb3BlIjoicmVnaXN0cmF0aW9uI2dsb2JhbCByZWdpc3RyYXRpb24jaG9zdCJ9.FOtPw0VUB5VRk4_aRs9wyo_jcAGppWUxpMXEGosM0zQ' | bash > /dev/null 2>&1 > /root/log_registersat.log
          
          /usr/bin/sleep 30
          
          
          
          
      path: /root/cloudinit.sh
      permissions: "0755"
cloudinit: ""
common:
  labels: null
  taints: []
contentLibrary: ""

{{- if eq (regexFind "^\\S*" .Values.pool.controlplane.vmbasket) "SMALL" }}
cpuCount: {{ .Values.pool.controlplane.vmsmallcpu | quote }}
{{- else }}
cpuCount: {{ .Values.pool.controlplane.vmstandardcpu | quote }}
{{- end }}

# 'Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy'
creationType: template

# vSphere custom attribute, format key/value e.g. '200=mycustom value'
customAttribute: []

# vSphere datacenter for virtual machine
datacenter: {{ .Values.vcenter.datacenter }}

# vSphere datastore for virtual machine
datastore: {{ .Values.vcenter.datastore }}

 # vSphere size of disk for  VM (in MB)
diskSize: {{ .Values.pool.controlplane.vmdisk | quote }}

# vSphere folder for the docker VM. This folder must already exist in the datacenter
folder: {{ .Values.vcenter.folder }}

 # vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS
hostsystem: {{ .Values.pool.controlplane.host }}

#memorySize: {{ .Values.pool.controlplane.vmram | quote }}
{{- if eq (regexFind "^\\S*" .Values.pool.controlplane.vmbasket) "SMALL" }}
memorySize: {{ .Values.pool.controlplane.vmsmallram | quote }}
{{- else }}
memorySize: {{ .Values.pool.controlplane.vmstandardram | quote }}
{{- end }}

network:
- {{ .Values.vcenter.datacenter }}/network/{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}
os: linux
pool: {{ .Values.vcenter.pool }}

# 'vSphere vApp IP allocation policy. Supported values are: dhcp, fixed, transient and fixedAllocated'
vappIpallocationpolicy: fixedAllocated

# 'vSphere vApp IP protocol for this deployment. Supported values are: IPv4 and IPv6'
vappIpprotocol: IPv4

# vSphere vApp properties
vappProperty:
- guestinfo.interface.0.ip.0.address=ip:{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}
- guestinfo.interface.0.ip.0.netmask=${netmask:{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}}
- guestinfo.interface.0.route.0.gateway=${gateway:{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}}
- guestinfo.dns.servers=${dns:{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}}
- guestinfo.dnssearch.servers=${dns:{{ regexFind "^\\S*" .Values.pool.controlplane.vlan }}}

# 'vSphere OVF environment transports to use for properties. Supported values are: iso and com.vmware.guestInfo'
vappTransport: com.vmware.guestInfo

# vSphere IP/hostname for vCenter
vcenter: "{{ .Values.vcenter.host }}"

# vSphere Port for vCenter
vcenterPort: "443"
